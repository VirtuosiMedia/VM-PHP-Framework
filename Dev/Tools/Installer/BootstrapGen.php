<?php
/**
* @author Virtuosi Media Inc.
* @license: MIT License
* Description: Generates a bootstrap file for VM Framework
* Requirements: PHP 5.2 or higher
*/
class Tools_Installer_BootstrapGen {
	
	protected $shortAppName;

	/**
	 * @param string $shortAppName - The name of the application as one word
	 */
	function __construct($shortAppName){
		$this->shortAppName = $shortAppName;
		$this->generate();
	}
	
	protected function generate(){
		$xml = new Vm_Xml();
		$className = $this->shortAppName.'_Bootstrap';
		$configName = $this->shortAppName.'_Config';
		$connectName = $this->shortAppName.'_Connect';
		$definedAppName = strtoupper($this->shortAppName);
		$definedAppAdminName = $definedAppName.'_ADMIN';		
				
		$fileContents = <<<EOT
<?php
/**
 * Bootstrap class generated by VM Framework
 * Loads the autoload function, loads the config file, sets the DB connection
 */
class $className {

	protected \$config;
	protected \$db;
	protected \$dbType;
	protected \$path;
	
	/**
	 * Bootstraps the autoload function and connects to the database
	 * @param boolean \$admin - TRUE if the calling page is in the admin directory, FALSE otherwise
	 */
	function __construct(\$admin = FALSE){
		\$this->setPath(\$admin);
		\$this->setAutoLoader();
		\$this->loadConfigFile();
		\$this->connectDb();
	}

	/**
	 * @param boolean \$admin - TRUE if the calling page is in the admin directory, FALSE otherwise
	 */
	protected function setPath(\$admin){
		if (\$admin) {
			define($definedAppAdminName, 1);
			\$this->path = '../';
		} else {
			define($definedAppName, 1);
			\$this->path = NULL;
		}		
	}

	/**
	 * Initiates the class autoloader
	 */
	protected function setAutoLoader(){
		require_once(\$this->path.'includes/$this->shortAppName/Autoload.php');		
	}

	/**
	 * Loads the config file
	 */
	protected function loadConfigFile(){
		\$this->config = new $configName();	
	}
	
	/**
	 * Establishes a database connection based on the config file
	 */
	protected function connectDb(){
		\$config = \$this->config;
		\$db = new $connectName(\$config->dbType, \$config->dbName, \$config->username, \$config->password, \$config->host, \$config->port, \$config->charset);
		\$this->db = \$db->getDbConnection();
		\$this->dbType = \$config->dbType;
		require_once(\$this->path.'includes/Vm/Db/'.\$config->dbType.'/DBObject.php');
	}

	/**
	 * Gets the database connection
	 * @return obj - A PDO object
	 */
	public function getDbConnection(){
		return \$this->db;
	}
	
	/**
	 * Gets the database type
	 * @return string - The type (brand) of database being used
	 */
	public function getDbType(){
		return \$this->dbType;
	}
}
?>
EOT;

		$file = new Vm_File('Bootstrap.php', 'includes/'.$this->shortAppName);
		$file->write($fileContents);

		if ($file->exists()){
			$this->tableRow = $xml->tr($xml->td("Bootstrap file generated for $this->shortAppName.", array('class'=>'pass')));
		} else {
			$this->tableRow = $xml->tr($xml->td("Bootstrap file could not be generated for $this->shortAppName.", array('class'=>'fail')));
		}		
	}

	/**
	 * @return string - The file generation status as an HTML table row
	 */
	public function getTableRow(){
		return $this->tableRow;
	}
}
?>